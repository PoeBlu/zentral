input {
    beats {
        port => "5044"
        ssl => true
        ssl_certificate => "/etc/logstash/zentral.crt"
        ssl_key => "/etc/logstash/zentral.pkcs8.key"
    }
}

filter {
    if [source] == "/usr/local/jss/logs/backupDatabase.log" {
        mutate { replace => { "type" => "backup_database" } }
        grok {
            match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{GREEDYDATA:cleaned_message}" }
        }
        date {
            match => [ "timestamp", "YYYY-MM-dd HH:mm:ss"]
        }
    } else if [source] == "/usr/local/jss/logs/JAMFChangeManagement.log" {
        mutate { replace => { "type" => "jamf_change_management" } }
        grok {
            match => { "message" => "\[(?<user>[^\[\]]+)\] \[(?<action>\S+)\] \[(?<object>[^\[\]]+)\] \[%{DATESTAMP_OTHER:timestamp}\](?m)\s*%{GREEDYDATA:object_info}" }
        }
        date {
            match => [ "timestamp", "EEE MMM dd HH:mm:ss zzz YYYY"]
        }
    } else if [source] == "/usr/local/jss/logs/JAMFSoftwareServer.log" {
        mutate { replace => { "type" => "jamf_software_server" } }
        grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[(?<log_level>\S+)\s*\] \[(?<info_1>\S+)\s*\] \[(?<component>\S+)\s*\] - %{GREEDYDATA:cleaned_message}" }
        }
        date {
            match => [ "timestamp", "YYYY-MM-dd HH:mm:ss,SSS"]
        }
    } else if [source] == "/usr/local/jss/logs/JSSAccess.log" {
        mutate { replace => { "type" => "jss_access" } }
        grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}: username=(?<username>[^,]+), status=(?<status>[^,]+), ipAddress=(?<ip_address>[^,]+), entryPoint=%{GREEDYDATA:entry_point}" }
        }
        date {
            match => [ "timestamp", "YYYY-MM-dd HH:mm:ss,SSS"]
        }
    } else if [source] == "/usr/local/jss/logs/jssinstaller.log" {
        mutate { replace => { "type" => "jamf_installer" } }
        grok {
            match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]: %{GREEDYDATA:cleaned_message}" }
        }
        date {
            match => [ "timestamp", "YYYY-MM-dd HH:mm:ss"]
        }
    }
}

output {
    rabbitmq {
        host => "rabbitmq"
        exchange => "jamf_beats"
        exchange_type => "fanout"
    }
}
